# Copyright (c) 2024, Austin Brooks <ab.proxygen@outlook.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

name: nightly

on:
  schedule:
    - cron: '10 8 * * 0-5'
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  prepare:
    runs-on: ubuntu-20.04

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Prepare'
        run: |
          echo INFO: Checking for new commits since the last run...
          # .[0].* would make the workflow see itself running on the
          # default head, meaning it would always match $GITHUB_SHA.
          mapfile -t -n 2 PXG_LAST_RUN < <( \
            gh run list \
              --workflow "${GITHUB_WORKFLOW}" \
              --limit 2 \
              --json 'headSha,startedAt' \
              --jq '.[1].headSha,.[1].startedAt' \
          )
          echo Last run commit SHA: ${PXG_LAST_RUN[0]}
          echo This run commit SHA: ${GITHUB_SHA}
          if [ "${PXG_LAST_RUN[0]}" == "${GITHUB_SHA}" ]; then
            echo INFO: Checking if existing nightly is recent...
            PXG_DATE_LAST=$(date --date "${PXG_LAST_RUN[1]}" +%s)
            PXG_DATE_NOW=$(date --utc +%s)
            if (( ${PXG_DATE_LAST} > ${PXG_DATE_NOW} - (60*60*24*7+1800) )); then
              echo INFO: No major changes since the last run. Cancelling workflow...
              gh run cancel ${{ github.run_id }}
              gh run watch ${{ github.run_id }} --interval 15
            fi
          fi

          echo INFO: Deleting nightly release...
          gh release view nightly \
          &&
          (
            gh release delete nightly --cleanup-tag -y \
              || exit 99
          )

          # Sleeping here because tag deletion is queued on GitHub's side.
          # Suppose we create a new release before the tag is deleted.
          # When tag deletion runs and sees a release against a tag
          # that's being deleted, it sets the release to Draft.
          # If we wait, the tag is first deleted, and we create an
          # all-new release instead of creating a release on the
          # old tag mere seconds before it was deleted.
          # See:
          # https://github.com/cli/cli/issues/8458#issuecomment-1854326401
          sleep 15

          echo INFO: Creating nightly release...
          python scripts/cicd-changelog.py refs/tags/nightly \
            || exit 99
          gh release create nightly \
            --title "Nightly build" \
            --notes-file "release/CHANGELOG-release.md" \
            --prerelease=true \
            --draft=false \
            || exit 99
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  call-linux-x64:
    needs: [prepare]
    uses: ./.github/workflows/linux-x64.yml
    secrets: inherit
    with:
      target: nightly
